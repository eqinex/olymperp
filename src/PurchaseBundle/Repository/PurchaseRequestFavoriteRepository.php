<?php


namespace PurchaseBundle\Repository;

use AppBundle\Traits\RepositoryPaginatorTrait;
use Doctrine\ORM\QueryBuilder;
use PurchaseBundle\PurchaseConstants;

/**
 * PurchaseRequestFavoriteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PurchaseRequestFavoriteRepository extends \Doctrine\ORM\EntityRepository
{
    use RepositoryPaginatorTrait;

    /**
     * @param $currentUser
     * @param $order
     * @param $orderBy
     * @param $filters
     * @param int $currentPage
     * @param int $perPage
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function getPurchaseRequestFavorite(
        $currentUser,
        $order,
        $orderBy,
        $filters,
        $currentPage = 1,
        $perPage = 20)
    {
        $qb = $this->createQueryBuilder('prf');

        $qb ->leftJoin('prf.purchaseRequest','pr');

        $qb = $this->applyFilters($qb, $filters);

        if (!empty($orderBy))
        {
            if ($orderBy == 'project') {
                $qb
                    ->leftJoin('pr.project', 'tpr')
                    ->orderBy('tpr.name', $order);
            } else {
                $qb->orderBy('pr.' . $orderBy, $order);
            }
        } else {
            $qb->orderBy('pr.id', 'DESC');
        }

        $qb
            ->leftJoin('prf.user','u')
            ->andWhere($qb->expr()->eq('u', ':userId'))
            ->setParameter('userId', $currentUser)
        ;

        $paginator = $this->paginate($qb, $currentPage, $perPage);

        return $paginator;
    }

    /**
     * @param QueryBuilder $qb
     * @param $filters
     * @return QueryBuilder
     */
    protected function applyFilters(QueryBuilder $qb, $filters)
    {


        if (!empty($filters['project'])) {
            $qb
                ->andWhere('pr.project = :project')
                ->setParameter('project', $filters['project'])
            ;
        }
        if (!empty($filters['code'])) {
            $qb
                ->andWhere(
                    $qb->expr()->like('pr.code', ':code')
                )
                ->setParameter('code', '%' . $filters['code'] . '%')
            ;

            $filters['status'] = !empty($filters['status']) ? $filters['status'] : PurchaseConstants::getStatesList();
        }

        if (!empty($filters['createdAt'])) {
            list($startAt, $endAt) = explode(' - ', $filters['createdAt']);

            $startAt = new \DateTime($startAt);
            $endAt = new \DateTime($endAt);

            $qb
                ->andWhere(
                    $qb->expr()->between('pr.createdAt', ':startAt', ':endAt')
                )
                ->setParameter('startAt', $startAt)
                ->setParameter('endAt', $endAt)
            ;

            $filters['status'] = !empty($filters['status']) ? $filters['status'] : PurchaseConstants::getStatesList();
        }

        if (!empty($filters['relevanceDate'])) {
            list($startAt, $endAt) = explode(' - ', $filters['relevanceDate']);

            $startAt = new \DateTime($startAt);
            $endAt = new \DateTime($endAt);

            $qb
                ->andWhere(
                    $qb->expr()->between('pr.relevanceDate', ':startAt', ':endAt')
                )
                ->setParameter('startAt', $startAt)
                ->setParameter('endAt', $endAt)
            ;

            $filters['status'] = !empty($filters['status']) ? $filters['status'] : PurchaseConstants::getStatesList();
        }

        if (!empty($filters['owner'])) {
            $qb
                ->andWhere('pr.owner = :owner')
                ->setParameter('owner', $filters['owner'])
            ;
        }
        if (!empty($filters['type'])) {
            $qb
                ->andWhere('pr.type = :type')
                ->setParameter('type', $filters['type'])
            ;
        }
        if (!empty($filters['priority'])) {
            $qb
                ->andWhere('pr.priority = :priority')
                ->setParameter('priority', $filters['priority'])
            ;
        }
        if (!empty($filters['leader'])) {
            $qb
                ->andWhere(
                    $qb->expr()->orX(
                        $qb->expr()->eq('pr.leader' , ':leader')),
                    $qb->expr()->eq('pr.leaderApproved', 0)
                )
                ->orWhere($qb->expr()->eq('pr.projectLeader' , ':leader'))
                ->setParameter('leader', $filters['leader'])
            ;
        }
        if (!empty($filters['manager'])) {
            $qb
                ->andWhere('pr.purchasingManager = :manager')
                ->setParameter('manager', $filters['manager'])
            ;

            $filters['status'] = !empty($filters['status']) ? $filters['status'] : PurchaseConstants::getStatesList();
        }

        if (!empty($filters['status']) ||  (isset($filters['status']) && $filters['status'] === '0')) {
            $qb
                ->andWhere(
                    $qb->expr()->in('pr.status', ':statuses')
                )
                ->setParameter('statuses', $states = $filters['status'])
            ;
        } else {
            $qb
                ->andWhere(
                    $qb->expr()->notIn('pr.status', ':statuses')
                )
                ->setParameter('statuses', [PurchaseConstants::STATUS_REJECTED, PurchaseConstants::STATUS_DONE])
            ;
        }

        if (!empty($filters['invoicePayment'])) {
            $invoicePayments = $filters['invoicePayment'];
            $qb
                ->andWhere(
                    $qb->expr()->in('pr.invoicePayment', ':invoicePayments')
                )
                ->setParameter('invoicePayments', $invoicePayments)
            ;
        }

        if (!empty($filters['expensesType'])) {
            $expensesTypes = $filters['expensesType'];
            $qb
                ->andWhere(
                    $qb->expr()->in('pr.expensesType', ':expensesTypes')
                )
                ->setParameter('expensesTypes', $expensesTypes)
            ;
        }

        if (!empty($filters['paymentStatus'])) {

            $paymentStates = is_array($filters['paymentStatus']) ? $filters['paymentStatus'] :
                [$filters['paymentStatus']];
            $qb
                ->andWhere(
                    $qb->expr()->in('pr.paymentStatus', ':paymentStatuses')
                )
                ->setParameter('paymentStatuses', $paymentStates)
            ;
        }

        if (!empty($filters['financialUser'])) {
            $qb
                ->andWhere(
                    $qb->expr()->eq('pr.financialManager', ':financialUser')
                )
                ->setParameter('financialUser', $filters['financialUser'])
            ;
        }

        if (!empty($filters['deliveryStatus'])) {
            $qb
                ->andWhere(
                    $qb->expr()->in('pr.deliveryStatus', ':deliveryStatuses')
                )
                ->setParameter('deliveryStatuses', [$filters['deliveryStatus']])
            ;
        }

        if (!empty($filters['supplier']) || !empty($filters['itemName']) || !empty($filters['itemNumber']) ||!empty($filters['invoiceNumber'])) {
            $qb
                ->leftJoin('pr.items', 'pri')
            ;
        }
        if (!empty($filters['supplier'])) {
            $qb
                ->andWhere(
                    $qb->expr()->eq('pri.supplier', ':supplier')
                )
                ->setParameter('supplier', [$filters['supplier']])
            ;
        }

        if (!empty($filters['invoiceNumber'])) {
            $qb
                ->andWhere(
                    $qb->expr()->eq('pri.invoiceNumber', ':invoiceNumber')
                )
                ->setParameter('invoiceNumber', [$filters['invoiceNumber']])
            ;
        }

        if (!empty($filters['itemName'])) {
            $qb

                ->andWhere(
                    $qb->expr()->orX(
                        $qb->expr()->in('pri.title', ':itemName')
                    )
                )
                ->setParameter('itemName', [$filters['itemName']])
            ;
        }

        if (!empty($filters['itemNumber'])) {
            $qb
                ->andWhere(
                    $qb->expr()->orX(
                        $qb->expr()->eq('pri.sku', ':itemNumber')
                    )
                )
                ->setParameter('itemNumber', [$filters['itemNumber']])
            ;
        }

        if (!empty($filters['ownProduction'])) {
            $qb
                ->andWhere('pr.productionStatus = :productionStatus')
                ->setParameter('productionStatus', PurchaseConstants::PRODUCTION_STATUS_IN_PRODUCTION)
            ;
        }

        if (!empty($filters['ware'])) {
            $qb
                ->andWhere($qb->expr()->eq('pr.ware', ':ware'))
                ->setParameter('ware', $filters['ware'])
            ;
        }

        if (isset($filters['productionLeader'])) {
            $qb
                ->andWhere('pr.productionLeader = :productionLeader')
                ->setParameter('productionLeader', $filters['productionLeader'])
            ;
        }

        if (!empty($filters['description'])) {
            $qb
                ->andWhere($qb->expr()->like('pr.description', ':description'))
                ->setParameter('description','%' . $filters['description'] . '%')
            ;
        }

        return $qb;
    }
}