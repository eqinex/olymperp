<?php

namespace PurchaseBundle\Repository;
use AppBundle\Entity\User;
use AppBundle\Traits\RepositoryPaginatorTrait;
use ProductionBundle\Entity\Ware;
use PurchaseBundle\Entity\PurchaseRequest;
use PurchaseBundle\Entity\RequestItem;
use PurchaseBundle\PurchaseConstants;

/**
 * RequestItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RequestItemRepository extends \Doctrine\ORM\EntityRepository
{
    use RepositoryPaginatorTrait;

    /**
     * @param $filters
     * @param int $currentPage
     * @param int $perPage
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function getAvailableItems($filters, $currentPage = 1, $perPage = 20)
    {
        $qb = $this->createQueryBuilder('pri');

        if (!empty($filters['project'])) {
            $qb
                ->leftJoin('pri.purchaseRequest', 'pro')
                ->andWhere('pro.project = :project')
                ->setParameter('project', $filters['project'])
            ;
        }

        if (!empty($filters['supplier'])) {
            if ($filters['supplier'] == 'null') {
                $qb
                    ->andWhere($qb->expr()->isNull('pri.supplier'));
            } else {
                $qb
                    ->andWhere('pri.supplier = :supplier')
                    ->setParameter('supplier', $filters['supplier'])
                ;
            }
        }

        if (!empty($filters['title'])) {
            $qb
                ->andWhere($qb->expr()->like('pri.title', ':title'))
                ->setParameter('title', '%' . $filters['title'] . '%')
            ;
        }

        if (!empty($filters['sku'])) {
            $qb
                ->andWhere($qb->expr()->like('pri.sku', ':sku'))
                ->setParameter('sku', '%' . $filters['sku'] . '%')
            ;
        }

        $qb
            ->leftJoin('pri.purchaseRequest', 'pr')
            ->andWhere('pr.status != :status')
            ->setParameter('status', PurchaseConstants::STATUS_REJECTED)
        ;

        $paginator = $this->paginate($qb, $currentPage, $perPage);

        return $paginator;
    }

    /**
     * @return array
     */
    public function getRequestMoneyReport()
    {
        $qb = $this->createQueryBuilder('pri');

        $qb->select('pr.status, SUM(pri.price) amount');
        $qb->leftJoin('pri.purchaseRequest', 'pr');

        $qb->groupBy('pr.status');

        $states = $qb->getQuery()->getScalarResult();

        $report = ['total' => 0];

        foreach ($states as $state) {
            $report[$state['status']] = $state['amount'];
            $report['total'] += $state['amount'];
        }

        return $report;
    }
    
    /**
     * @param $projectId
     * @return array
     */
    public function getRequestCosts($projectId)
    {
        $qb = $this->createQueryBuilder('pri');

        $qb->select('SUM(pri.price) amount');
        $qb
            ->leftJoin('pri.purchaseRequest', 'pr')
            ->where('pr.project = :projectId')
            ->andWhere('pr.status = :statusDone')
            ->setParameters([
                'projectId' => $projectId,
                'statusDone' => PurchaseConstants::STATUS_DONE
            ])
        ;

        $costs = $qb->getQuery()->getSingleScalarResult();

        return $costs;
    }

    /**
     * @param $paymentState
     * @return array
     */
    public function getRequestPaymentStats($paymentState)
    {
        $qb = $this->createQueryBuilder('pri');

        $qb->select('pr.priority, count(DISTINCT pr.id) cnt, SUM(pri.price) amount');
        $qb
            ->leftJoin('pri.purchaseRequest', 'pr')

            ->andWhere('pr.paymentStatus = :statusDone')
            ->setParameters([
                'statusDone' => $paymentState
            ])
            ->addGroupBy('pr.priority')
        ;

        $stats = $qb->getQuery()->getScalarResult();

        $result = [
            PurchaseRequest::PRIORITY_LOW => ['count' => 0, 'amount' => 0],
            PurchaseRequest::PRIORITY_NORMAL => ['count' => 0, 'amount' => 0],
            PurchaseRequest::PRIORITY_HIGH => ['count' => 0, 'amount' => 0],
            PurchaseRequest::PRIORITY_HIGHEST => ['count' => 0, 'amount' => 0],
            'total' => [
                'count' => 0,
                'amount' => 0
            ]
        ];

        foreach ($stats as $stat) {
            $result[$stat['priority']] = [
                'count' => $stat['cnt'],
                'amount' => $stat['amount']
            ];

            $result['total']['count'] += $stat['cnt'];
            $result['total']['amount'] += $stat['amount'];
        }

        return $result;
    }

    /**
     * @param PurchaseRequest $purchaseRequest
     * @return array
     */
    public function getPurchaseRequestSuppliers(PurchaseRequest $purchaseRequest)
    {
        $qb = $this->createQueryBuilder('prs');

        $qb->select('prs');

        $qb
            ->where($qb->expr()->eq('prs.purchaseRequest', ':purchaseRequest'))
            ->setParameter('purchaseRequest', $purchaseRequest)
        ;

        $items = $qb->getQuery()->getResult();

        $suppliers = [];

        /** @var RequestItem $item */
        foreach ($items as $item) {
            $supplier = $item->getInvoice() ? $item->getInvoice()->getSupplier() : $item->getSupplier();
            if ($supplier && !in_array($supplier->getTitle(), $suppliers)) {
                $suppliers[] = $supplier;
            }
        }

        return $suppliers;
    }
}
