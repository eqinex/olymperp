<?php

namespace PurchaseBundle\Repository;
use AppBundle\Traits\RepositoryPaginatorTrait;
use Doctrine\Common\Collections\ArrayCollection;
use DocumentBundle\Entity\Document;
use PhpOffice\PhpSpreadsheet\Calculation\DateTime;

/**
 * SupplierRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SupplierRepository extends \Doctrine\ORM\EntityRepository
{
    use RepositoryPaginatorTrait;

    /**
     * @param $filters
     * @param int $currentPage
     * @param int $perPage
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function  getSuppliers($filters, $currentPage = 1, $perPage = 20)
    {
        $qb = $this->createQueryBuilder('sl');

        $qb->select('sl');

        if (!empty($filters['document'])) {
            $qb
                ->leftJoin(Document::class, 'sld', 'WITH', 'sld.supplier = sl.id')
                ->andWhere($qb->expr()->eq('sld.code', ':code'))
                ->setParameter('code', $filters['document'])
            ;
        }
        if (!empty($filters['supplier'])) {
            $qb
                ->andWhere('sl.id = :supplier')
                ->setParameter('supplier', $filters['supplier'])
            ;
        }
        if (!empty($filters['itn'])) {
            $qb
                ->andWhere($qb->expr()->like('sl.itn', ':itn'))
                ->setParameter('itn', '%' . $filters['itn'] . '%')
            ;
        }
        if (!empty($filters['category'])) {
            $qb
                ->leftJoin('sl.supplierCategories', 'slc')
                ->andWhere($qb->expr()->eq('slc.id', ':category'))
                ->setParameter('category', $filters['category'])
            ;
        }

        $qb->orderBy('sl.id', 'DESC');

        $paginator = $this->paginate($qb, $currentPage, $perPage);

        return $paginator;
    }

    /**
     * @param $category
     *
     * @return ArrayCollection
     */
    public function findSuppliersByCategory($category)
    {
        $qb = $this->createQueryBuilder('sl');

        $qb->select('sl');
        $qb
            ->leftJoin('sl.supplierCategories', 'slc')
            ->andWhere($qb->expr()->eq('slc.id', ':category'))
            ->setParameter('category', $category)
        ;

        return $qb->getQuery()->getResult();
    }

    /**
     * @param int $limit
     * @return mixed
     * @throws \Exception
     */
    public function getSupplierReadyToUpdate($limit)
    {
        $date = new \DateTime('now');
        $date->modify('-2 weeks');

        $qb = $this->createQueryBuilder('sl');

        $qb->select('sl');
        $qb
            ->andWhere('sl.updatedAt < :date')
            ->setParameter('date', $date)
            ->setMaxResults($limit)
            ->orderBy('sl.updatedAt', 'DESC')
        ;

        return $qb->getQuery()->getResult();
    }

    /**
     * @return mixed
     */
    public function getSupplierWithItn()
    {
        $qb = $this->createQueryBuilder('swi');

        $qb->select('swi');

        $qb->where($qb->expr()->isNotNull('swi.itn'));

        return $qb->getQuery()->getResult();
    }
}
