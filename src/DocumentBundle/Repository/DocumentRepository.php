<?php

namespace DocumentBundle\Repository;
use AppBundle\Entity\User;
use AppBundle\Traits\RepositoryPaginatorTrait;
use Doctrine\ORM\QueryBuilder;
use DocumentBundle\Entity\Document;

/**
 * DocumentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DocumentRepository extends \Doctrine\ORM\EntityRepository
{
    use RepositoryPaginatorTrait;

    /**
     * @param $filters
     * @param User $user
     * @param $orderBy
     * @param $order
     * @param int $currentPage
     * @param int $perPage
     * @return \Doctrine\ORM\Tools\Pagination\Paginator|mixed
     * @throws \Exception
     */
    public function getAvailableDocuments($filters, User $user, $orderBy, $order, $currentPage = 1, $perPage = 20)
    {
        $qb = $this->createQueryBuilder('d');

        $qb = $this->applyFilters($qb, $filters, $user);

        if (!empty($orderBy)) {
            $qb->orderBy('d.' . $orderBy, $order);
        } else {
            $qb->orderBy('d.id', 'DESC');
        }

        $paginator = $this->paginate($qb, $currentPage, $perPage);

        return $paginator;
    }

    /**
     * @param $filters
     * @param User $user
     * @param $orderBy
     * @param $order
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     * @throws \Exception
     */
    public function getDocuments($filters, User $user, $orderBy, $order)
    {
        $qb = $this->createQueryBuilder('d');

        $qb = $this->applyFilters($qb, $filters, $user);

        if (!empty($orderBy)) {
            $qb->orderBy('d.' . $orderBy, $order);
        } else {
            $qb->orderBy('d.id', 'DESC');
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * @param $filters
     * @param $orderBy
     * @param $order
     * @param int $currentPage
     * @param int $perPage
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function getNeedsApproveDocuments($filters, $orderBy, $order, $currentPage = 1, $perPage = 20)
    {
        $qb = $this->createQueryBuilder('dc');

        $qb->select('dc');

        if (!empty($filters['status'])) {
            $qb
                ->andWhere($qb->expr()->in('dc.status', ':statuses'))

                ->setParameter('statuses', $filters['status']);
        }
        if (!empty($filters['code'])) {
            $qb
                ->andWhere(
                    $qb->expr()->like('dc.code', ':code')
                )
                ->setParameter('code',  $filters['code'] )
            ;
        }

        if (!empty($filters['createdAt'])) {
            list($startAt, $endAt) = explode(' - ', $filters['createdAt']);

            $startAt = new \DateTime($startAt);
            $endAt = new \DateTime($endAt);

            $qb
                ->andWhere(
                    $qb->expr()->between('dc.createdAt', ':startAt', ':endAt')
                )
                ->setParameter('startAt', $startAt)
                ->setParameter('endAt', $endAt)
            ;
        }

        if (!empty($filters['documentApproved'])) {
            $qb
                ->leftJoin('dc.signatories','ds')
                ->andWhere($qb->expr()->eq('ds.signatory', ':signatory'))
                ->setParameter('signatory', $filters['user']);
        } else {
            $qb
                ->leftJoin('dc.signatories','ds')
                ->andWhere(
                    $qb->expr()->andX(
                        $qb->expr()->eq('ds.signatory', ':signatory'),
                        $qb->expr()->eq('ds.approved', 0)),
                        $qb->expr()->neq('dc.status', Document::DOCUMENT_STATUS_CANCELLED))
                ->setParameter('signatory', $filters['user']);
        }

        if (!empty($orderBy)) {
            $qb->orderBy('dc.' . $orderBy, $order);
        } else {
            $qb->orderBy('dc.status', 'ASC');
        }

        $paginator = $this->paginate($qb, $currentPage, $perPage);

        return $paginator;
    }

    /**
     * @param $status
     * @param User $user
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getDocumentsCounter($status, User $user)
    {
        $qb = $this->createQueryBuilder('dc');

        $qb->select('COUNT(dc.id)');

        $qb
            ->leftJoin('dc.signatories','ds')
            ->where(
                $qb->expr()->andX(
                    $qb->expr()->eq('ds.signatory', ':signatory'),
                    $qb->expr()->eq('ds.approved', ':notapproved'),
                    $qb->expr()->eq('dc.status', ':status')
                )
            )
            ->setParameter('signatory', $user)
            ->setParameter('notapproved', false)
            ->setParameter('status', $status);

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @param Document $document
     * @return int
     */
    public function getDocumentTemplateSupplementaryCounter(Document $document) {

        $qb = $this->createQueryBuilder('dc');

        $qb->select('dc');

        $qb
            ->where(
                $qb->expr()->andX(
                    $qb->expr()->eq('dc.documentTemplateSupplementary', ':documentTemplateSupplementary'),
                    $qb->expr()->eq('dc.parentDocument', ':parentDocument')
                )
            )
            ->setParameter('documentTemplateSupplementary', $document->getDocumentTemplateSupplementary()->getId())
            ->setParameter('parentDocument', $document->getParentDocument()->getId());

        $qb->orderBy('dc.createdAt', 'ASC');

        $numberSupplementaryDocument = 1;

        foreach ($qb->getQuery()->getResult() as $supplementaryDocument) {
            if ($supplementaryDocument->getId() == $document->getId()) {
                break;
            }
            $numberSupplementaryDocument++;
        }

        return $numberSupplementaryDocument;
    }

    /**
     * @param QueryBuilder $qb
     * @param $filters
     * @param User $user
     * @return QueryBuilder
     */
    protected function applyFilters(QueryBuilder $qb, $filters, User $user)
    {
        $users = [$user->getId()];

        if ($user->getTeam()) {
            foreach ($user->getTeam()->getAllTeamMembers() as $member) {
                $users[] = $member->getId();
            }
        }

        if (!empty($filters['user'])) {
            $qb
                ->leftJoin('d.signatories','ds')
                ->where($qb->expr()->in('d.owner', ':users'))
                ->orWhere($qb->expr()->eq('ds.signatory', ':signatory'))
                ->setParameter('users', $users)
                ->setParameter('signatory', $filters['user'])
            ;
        }

        if (!empty($filters['code'])) {
            $qb
                ->andWhere(
                    $qb->expr()->like('d.code', ':code')
                )
                ->setParameter('code',  $filters['code'])
            ;
        }

        if (!empty($filters['status'])) {
            $qb
                ->andWhere(
                    $qb->expr()->in('d.status', ':statuses')
                )
                ->setParameter('statuses', $filters['status'])
            ;
        } elseif (!empty($filters['missingContracts'])) {
            $qb
                ->andWhere(
                    $qb->expr()->notIn('d.status', ':statuses')
                )
                ->setParameter('statuses', [Document::DOCUMENT_STATUS_REGISTERED])
            ;
        } else {
            $qb
                ->andWhere(
                    $qb->expr()->in('d.status', ':statuses')
                )
                ->setParameter('statuses', [
                    Document::DOCUMENT_STATUS_NEW,
                    Document::DOCUMENT_STATUS_ON_HOLD,
                    Document::DOCUMENT_STATUS_NEEDS_FIXING,
                    Document::DOCUMENT_STATUS_NEEDS_APPROVE,
                    Document::DOCUMENT_STATUS_APPROVED,
                    Document::DOCUMENT_STATUS_REGISTERED
                ])
            ;
        }

        if (!empty($filters['createdAt'])) {
            list($startAt, $endAt) = explode(' - ', $filters['createdAt']);

            $startAt = new \DateTime($startAt);
            $endAt = new \DateTime($endAt);

            $qb
                ->andWhere(
                    $qb->expr()->between('d.createdAt', ':startAt', ':endAt')
                )
                ->setParameter('startAt', $startAt)
                ->setParameter('endAt', $endAt)
            ;

            return $qb->getQuery()->getResult();
        }

        if (!empty($filters['project'])) {
            $qb
                ->andWhere('d.project = :project')
                ->setParameter('project', $filters['project'])
            ;
        }

        if (!empty($filters['template'])) {
            $qb
                ->andWhere('d.documentTemplate = :template')
                ->setParameter('template', $filters['template'])
            ;
        }

        if (!empty($filters['supplier'])) {
            $qb
                ->andWhere('d.supplier = :supplier')
                ->setParameter('supplier', $filters['supplier'])
            ;
        }

        if (!empty($filters['initiator'])) {
            $qb
                ->andWhere('d.owner = :initiator')
                ->setParameter('initiator', $filters['initiator'])
            ;
        }

        return $qb;
    }
}
