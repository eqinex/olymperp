<?php

namespace DocumentBundle\Repository;

use AppBundle\Traits\RepositoryPaginatorTrait;
use DocumentBundle\Entity\Activity;

/**
 * ActivityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActivityRepository extends \Doctrine\ORM\EntityRepository
{
    use RepositoryPaginatorTrait;

    /**
     * @param $category
     * @param $filters
     * @return mixed
     */
    public function getAvailableActivities($category, $filters)
    {
        $qb = $this->createQueryBuilder('ac');

        if (!empty($filters['highRisk'])) {
            $qb
                ->where('ac.highRisk != :highRisk')
                ->setParameter('highRisk', $filters['highRisk'])
            ;
        }

        if (!empty($filters['user'])) {
            $qb
                ->where('ac.responsibleUser = :responsibleUser')
                ->orWhere('ac.owner = :owner')
                ->setParameter('responsibleUser', $filters['user'])
                ->setParameter('owner', $filters['user'])
            ;
        }

        if (!empty($filters['project'])) {
            $qb
                ->andWhere('ac.project = :project')
                ->setParameter('project', $filters['project'])
            ;
        }

        if (!empty($filters['responsible'])) {
            $qb
                ->andWhere('ac.responsibleUser = :responsibleUser')
                ->setParameter('responsibleUser', $filters['responsible'])
            ;
        }

        if (!empty($filters['endAt'])) {
            list($startAt, $endAt) = explode(' - ', $filters['endAt']);

            $startAt = new \DateTime($startAt);
            $endAt = new \DateTime($endAt);

            $qb
                ->andWhere(
                    $qb->expr()->between('ac.endAt', ':startAt', ':endAt')
                )
                ->setParameter('startAt', $startAt)
                ->setParameter('endAt', $endAt)
            ;
        }

        if (!empty($filters['result'])) {
            $qb
                ->andWhere('ac.result = :result')
                ->setParameter('result', $filters['result']);
        } else {
            $qb
                ->andWhere('ac.result = :result')
                ->setParameter('result', Activity::ACTIVITY_RESULT_NOT_PERFORMED)
            ;
        }

        $qb
            ->select('ac')
            ->andWhere('ac.category = :category')
            ->setParameter('category', $category)
        ;

        return $qb->getQuery()->getResult();
    }

    /**
     * @param $currentUser
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getActivitiesResponsible($currentUser)
    {
        $qb = $this->createQueryBuilder('ar');

        $qb
            ->select('COUNT(ar.id)')
            ->where('ar.responsibleUser = :responsibleUser')
            ->andWhere('ar.result = :result')
            ->setParameter('responsibleUser', $currentUser)
            ->setParameter('result', Activity::ACTIVITY_RESULT_NOT_PERFORMED)
        ;

        return $qb->getQuery()->getSingleScalarResult();
    }
}