<?php

namespace AppBundle\Repository;
use AppBundle\Entity\ProjectTask;
use AppBundle\Entity\Team;
use AppBundle\Entity\User;
use AppBundle\Traits\RepositoryPaginatorTrait;
use Doctrine\ORM\QueryBuilder;

/**
 * ProjectTaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectTaskRepository extends \Doctrine\ORM\EntityRepository
{
    use RepositoryPaginatorTrait;

    /**
     * @param User $user
     * @param $filters
     * @param int $currentPage
     * @param int $perPage
     * @param string $order
     * @param string $orderBy
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function getAvailableTasks(
        User $user,
        $filters,
        $orderBy,
        $order,
        $currentPage = 1,
        $perPage = 20
    ) {
        $qb = $this->createQueryBuilder('t');

        $qb
            ->select('t')
            ->where($qb->expr()->neq('t.type', ':type'))
            ->andWhere('t.scheduler = :scheduler')
            ->setParameter('type', ProjectTask::TYPE_PROTOCOL)
            ->setParameter('scheduler', false);

        if (!empty($filters['show-team-tasks'])) {
            // ignore in/out filters
        } elseif (!empty($filters['type']) && $filters['type'] == 'out') {
            $qb->andWhere('t.reporter = :user');

            if (!empty($filters['responsible'])) {
                $qb->andWhere('t.responsibleUser = :responsible');
                $qb->setParameter('responsible', $filters['responsible']);
            } else {
                $qb->andWhere('t.responsibleUser != :user');
            }

            $qb->setParameter('user', $user->getId());
        } elseif (!empty($filters['type']) && $filters['type'] == 'control') {
            $qb->andWhere('t.controllingUser = :user');

            $qb->setParameter('user', $user->getId());
        } else {
            $responsible = !empty($filters['responsible']) ? $filters['responsible'] : $user->getId();

            $qb
                ->andWhere('t.responsibleUser = :responsible')
                ->setParameter('responsible', $responsible)
            ;
        }

        $qb = $this->applyFilters($qb, $filters);

        if (!empty($orderBy)) {
            if ($orderBy == 'project') {
                $qb
                    ->leftJoin('t.project', 'tp')
                    ->orderBy('tp.name', $order);
            } else {
                $qb->orderBy('t.' . $orderBy, $order);
            }
        } else {
            $qb->orderBy('t.status', 'ASC');
        }

        $paginator = $this->paginate($qb, $currentPage, $perPage);

        return $paginator;
    }

    /**
     * @param User $user
     * @param $filters
     * @param int $currentPage
     * @param int $perPage
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function getProtocolTasks(User $user, $filters, $currentPage = 1, $perPage = 20)
    {
        $qb = $this->createQueryBuilder('t');
        $qb->select('t');

        if (!empty($filters['user'])) {
            $qb
                ->leftJoin('t.protocolTasks', 'tpr')
                ->where(
                    $qb->expr()->orX(
                        $qb->expr()->eq('t.responsibleUser', $user->getId()),
                        $qb->expr()->eq('t.controllingUser', $user->getId()),
                        $qb->expr()->eq('t.reporter', $user->getId()),
                        $qb->expr()->eq('tpr.responsibleUser', $user->getId()),
                        $qb->expr()->eq('tpr.controllingUser', $user->getId()),
                        $qb->expr()->eq('tpr.reporter', $user->getId())
                    )
                )
                ->andWhere($qb->expr()->eq('t.type', ':type'))
                ->setParameter('type', ProjectTask::TYPE_PROTOCOL)
            ;
        } else {
            $qb
                ->where($qb->expr()->eq('t.type', ':type'))
                ->setParameter('type', ProjectTask::TYPE_PROTOCOL)
            ;
        }

        $qb = $this->applyFilters($qb, $filters);

        if (!empty($filters['createdAt'])) {
            list($startAt, $endAt) = explode(' - ', $filters['createdAt']);

            $startAt = new \DateTime($startAt);
            $endAt = new \DateTime($endAt);

            $qb
                ->andWhere(
                    $qb->expr()->between('t.createdAt', ':startAt', ':endAt')
                )
                ->setParameter('startAt', $startAt)
                ->setParameter('endAt', $endAt);
        }
        $qb->orderBy('t.status', 'ASC');

        $paginator = $this->paginate($qb, $currentPage, $perPage);

        return $paginator;
    }

    /**
     * @param User $user
     * @param $filters
     * @param int $currentPage
     * @param int $perPage
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function getScheduledTasks(User $user, $filters, $currentPage = 1, $perPage = 20)
    {
        $qb = $this->createQueryBuilder('t');

        $qb->select('t');

        $qb
            ->where($qb->expr()->eq('t.scheduler', ':scheduler'))
            ->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->eq('t.reporter', $user->getId()),
                    $qb->expr()->eq('t.responsibleUser', $user->getId())
                )
            )
            ->setParameter('scheduler', 1);

        $qb = $this->applyFilters($qb, $filters);

        $paginator = $this->paginate($qb, $currentPage, $perPage);

        return $paginator;
    }


    /**
     * @return mixed
     */
    public function getAvailableScheduledTasks()
    {
        $qb = $this->createQueryBuilder('st');

        $qb
            ->leftJoin('st.reporter', 'u')
            ->select('st');

        $qb
            ->where($qb->expr()->eq('st.scheduler', ':scheduler'))
            ->andWhere($qb->expr()->in('u.employeeStatus', ':employeeStatus'))
            ->andWhere($qb->expr()->eq('st.status', ProjectTask::STATUS_SCHEDULED))
            ->setParameter('employeeStatus', [User::EMPLOYEE_STATUS_ACTIVE, User::EMPLOYEE_STATUS_OUTSOURCE])
            ->setParameter('scheduler', 1);

        return $qb->getQuery()->getResult();;
    }

    /**
     * @param $filters
     * @return array
     */
    public function getTasksCount($filters, $status)
    {
        $qb = $this->createQueryBuilder('t');

        $filters['status'] = $status;

        $qb
            ->select('count(DISTINCT t.id)')
            ->where($qb->expr()->neq('t.type', ':type'))
            ->setParameter('type', ProjectTask::TYPE_PROTOCOL)
        ;

        $qb = $this->applyFilters($qb, $filters);

        $cnt = isset(current($qb->getQuery()->getArrayResult())[1]) ? current($qb->getQuery()->getArrayResult())[1] : 0;

        return $cnt;
    }

    /**
     * @param QueryBuilder $qb
     * @param $filters
     * @return QueryBuilder
     */
    protected function applyFilters(QueryBuilder $qb, $filters)
    {
        if (!empty($filters['project'])) {
            $qb
                ->andWhere('t.project = :project')
                ->setParameter('project', $filters['project'])
            ;
        }
        if (!empty($filters['team'])) {
            $qb
                ->leftJoin('t.responsibleUser', 'tru')
                ->leftJoin('tru.team', 'trum')
                ->andWhere($qb->expr()->eq('tru.team', ':team'))
                ->setParameter('team', $filters['team'])
            ;
        }
        if (!empty($filters['responsible'])) {
            $qb
                ->andWhere('t.responsibleUser = :responsibleUser')
                ->setParameter('responsibleUser', $filters['responsible'])
            ;
        }

        if (!empty($filters['controllingUser'])) {
            $qb
                ->andWhere('t.controllingUser = :controllingUser')
                ->setParameter('controllingUser', $filters['controllingUser'])
            ;
        }

        if (!empty($filters['title'])) {
            $qb
                ->andWhere($qb->expr()->like('t.title', ':title'))
                ->setParameter('title', '%' . $filters['title'] . '%')
            ;
        }

        if (!empty($filters['status']) || (isset($filters['status']) && $filters['status'] == '0')) {
            if (!is_array($filters['status'])) {
                if ($filters['status'] == '9') {
                    $states = !empty($filters['scheduler']) ? [2, 3, 10] : [0, 1, 2, 3, 4, 5, 6, 7, 8];
                } else {
                    $states = [$filters['status']];
                }
            } else {
                $states = $filters['status'];
            }
            $qb
                ->andWhere(
                    $qb->expr()->in('t.status', ':statuses')
                )
                ->setParameter('statuses', $states)
            ;
        } else {
            $qb
                ->andWhere(
                    $qb->expr()->in('t.status', ':statuses')
                )
                ->setParameter('statuses', !empty($filters['scheduler']) ? 10 : [0, 1, 2, 4, 5, 6, 7]);
        }

        if (!empty($filters['priority']) && $filters['priority'] != 0) {
            $qb
                ->andWhere('t.priority = :priority')
                ->setParameter('priority', $filters['priority'])
            ;
        }

        if (!empty($filters['period'])) {
            list($startAt, $endAt) = explode(' - ', $filters['period']);

            $startAt = new \DateTime($startAt);
            $endAt = new \DateTime($endAt);

            $qb
                ->andWhere(
                    $qb->expr()->orX(
                        $qb->expr()->between('t.startAt', ':startAt', ':endAt'),
                        $qb->expr()->between('t.endAt', ':startAt', ':endAt'),
                        $qb->expr()->between(':startAt', 't.startAt', 't.endAt'),
                        $qb->expr()->between(':endAt', 't.startAt', 't.endAt')
                    )
                )
                ->setParameter('startAt', $startAt)
                ->setParameter('endAt', $endAt);
        }

        if (!empty($filters['completeOnTimeTask'])) {
            $qb->andWhere('t.endAt >= t.closedAt');
        }

        if (!empty($filters['scheduledPeriod'])) {
            $qb
                ->andWhere($qb->expr()->eq('t.scheduledPeriod', ':scheduledPeriod'))
                ->setParameter('scheduledPeriod', $filters['scheduledPeriod'])
            ;
        }

        if (!empty($filters['overdueTask'])) {
            $qb->andWhere('t.endAt < t.closedAt OR (t.closedAt is null and t.endAt < CURRENT_DATE())');
        }

        if (!empty($filters['totalOverdueNowTask'])) {
            $qb->andWhere('t.endAt < CURRENT_DATE()');
        }

        if (!empty($filters['department'])) {
            $qb
                ->leftJoin('t.responsibleUser', 'pr')
                ->andWhere($qb->expr()->in('pr.team', ':teams'))
                ->setParameter('teams', $filters['department'])
            ;
        }

        return $qb;
    }

    /**
     * @param QueryBuilder $qb
     * @param $filters
     * @param $statuses
     * @return array
     */
    protected function getAggregateReportCountTask(QueryBuilder $qb, $filters, $statuses)
    {
        $startAt = new \DateTime(date('01.m.Y'));
        $endAt = new \DateTime(date('t.m.Y'));

        if (!empty($filters['startAt'])) {
            list($startAt, $endAt) = explode(' - ', $filters['startAt']);
            $startAt = new \DateTime(date($startAt));
            $endAt = new \DateTime(date($endAt));
        }

        $qb
            ->leftJoin('pt.responsibleUser', 'u')
            ->select('u.id userId, COUNT(pt.id) cnt')
            ->andWhere($qb->expr()->neq('pt.type', ':type'))
            ->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->between('pt.startAt', ':startAt', ':endAt'),
                    $qb->expr()->between('pt.endAt', ':startAt', ':endAt'),
                    $qb->expr()->between(':startAt', 'pt.startAt', 'pt.endAt'),
                    $qb->expr()->between(':endAt', 'pt.startAt', 'pt.endAt')
                )
            )
            ->andWhere($qb->expr()->in('pt.status', $statuses))
            ->setParameter('type', ProjectTask::TYPE_PROTOCOL)
            ->setParameter('startAt', $startAt)
            ->setParameter('endAt', $endAt);

        $qb->groupBy('u.id');

        $cnt = [];

        foreach ($qb->getQuery()->getScalarResult() as $user) {
            $cnt[$user['userId']] = $user['cnt'];
        }

        return $cnt;
    }

    /**
     * @param $filters
     * @return array
     */
    public function getTotalTask($filters)
    {
        $qb = $this->createQueryBuilder('pt');

        $statuses = [
            ProjectTask::STATUS_NEW,
            ProjectTask::STATUS_IN_PROGRESS,
            ProjectTask::STATUS_DONE,
            ProjectTask::STATUS_READY_TO_WORK,
            ProjectTask::STATUS_ON_HOLD
        ];

        $cnt = $this->getAggregateReportCountTask($qb, $filters, $statuses);

        return $cnt;
    }

    /**
     * @param $filters
     * @return array
     */
    public function getCompletedTask($filters)
    {
        $qb = $this->createQueryBuilder('pt');

        $statuses = ProjectTask::STATUS_DONE;

        $cnt = $this->getAggregateReportCountTask($qb, $filters, $statuses);

        return $cnt;
    }

    /**
     * @param $filters
     * @return array
     */
    public function getPerformedTask($filters)
    {
        $qb = $this->createQueryBuilder('pt');

        $statuses = ProjectTask::STATUS_IN_PROGRESS;

        $cnt = $this->getAggregateReportCountTask($qb, $filters, $statuses);

        return $cnt;
    }
    /**
     * @param $filters
     * @return array
     */
    public function getCompletedOnTimeTask($filters)
    {
        $qb = $this->createQueryBuilder('pt');

        $qb->andWhere('pt.endAt >= pt.closedAt');

        $statuses = ProjectTask::STATUS_DONE;

        $cnt = $this->getAggregateReportCountTask($qb, $filters, $statuses);

        return $cnt;
    }

    /**
     * @param $filters
     * @return array
     */
    public function getOverdueTask($filters)
    {
        $qb = $this->createQueryBuilder('pt');

        $qb->andWhere(
            $qb->expr()->orX(
                $qb->expr()->lt('pt.endAt', 'pt.closedAt'),
                $qb->expr()->andX(
                    $qb->expr()->lt('pt.endAt', ':dateNow'),
                    $qb->expr()->isNull('pt.closedAt')
                )
            )
        );

        $qb->setParameter('dateNow', (new \DateTime())->format('Y-m-d H:i:s'));

        $statuses = [
            ProjectTask::STATUS_NEW,
            ProjectTask::STATUS_NEED_APPROVE,
            ProjectTask::STATUS_IN_PROGRESS,
            ProjectTask::STATUS_ON_HOLD,
            ProjectTask::STATUS_READY_TO_WORK,
            ProjectTask::STATUS_DONE
        ];

        $cnt = $this->getAggregateReportCountTask($qb, $filters, $statuses);

        return $cnt;
    }

    /**
     * @param $filters
     * @return array
     */
    public function getTotalOverdueNowTask($filters)
    {
        $qb = $this->createQueryBuilder('pt');

        $qb
            ->andWhere('pt.endAt < CURRENT_DATE()');

        $statuses = ProjectTask::STATUS_IN_PROGRESS;

        $cnt = $this->getAggregateReportCountTask($qb, $filters, $statuses);

        return $cnt;
    }

    /**
     * @param Team $team
     * @param $period
     * @return mixed
     */
    public function getTeamUserTasks(Team $team, $period)
    {
        $qb = $this->createQueryBuilder('tut');

        $qb->select('tut');
        list($startAt, $endAt) = explode(' - ', $period);

        $startAt = new \DateTime($startAt);
        $endAt = new \DateTime($endAt);

        $qb
            ->leftJoin('tut.responsibleUser', 'ru')
            ->where('ru.team = :team')
            ->andWhere($qb->expr()->in('ru.employeeStatus', ':employeeStatus'))
            ->andWhere(
                $qb->expr()->between('tut.endAt', ':startAt', ':endAt')
            )
            ->setParameter('team', $team->getId())
            ->setParameter('employeeStatus', [User::EMPLOYEE_STATUS_ACTIVE, User::EMPLOYEE_STATUS_OUTSOURCE])
            ->setParameter('startAt', $startAt)
            ->setParameter('endAt', $endAt)
        ;

        $qb->orderBy('tut.project', 'ASC');

        return $qb->getQuery()->getResult();
    }
}
