<?php

namespace AppBundle\Repository;
use AppBundle\Entity\User;
use AppBundle\Traits\RepositoryPaginatorTrait;

/**
 * WorkLogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class WorkLogRepository extends \Doctrine\ORM\EntityRepository
{
    use RepositoryPaginatorTrait;


    /**
     * @param $filters
     * @param int $currentPage
     * @param $perPage
     * @return array
     */
    public function getWorkLogs($filters, $currentPage = 1, $perPage = 20)
    {
        $qb = $this->createQueryBuilder('wl');

        $qb->select('wl');
        if (!empty($filters['owner'])) {
            $qb
                ->where('wl.owner = :owner')
                ->setParameter('owner', $filters['owner']);
        }

        if (!empty($filters['loggedDay'])) {
            list($startAt, $endAt) = explode(' - ', $filters['loggedDay']);

            $startAt = new \DateTime($startAt);
            $endAt = new \DateTime($endAt);

            $qb
                ->andWhere(
                    $qb->expr()->between('wl.loggedDay', ':startAt', ':endAt')
                )
                ->setParameter('startAt', $startAt)
                ->setParameter('endAt', $endAt);
        }

        $paginator = $this->paginate($qb, $currentPage, $perPage);

        return $paginator;
    }

    /**
     * @param User $user
     * @param $weekNumber
     * @return array
     */
    public function getUserSelectedWeekLog(User $user, $weekNumber)
    {
        $selectedWeek = (new \DateTime())->setISODate((new \DateTime())->format('Y'), $weekNumber)->setTime(0, 0);
        $startDate = clone $selectedWeek;
        $endDate = clone $selectedWeek;

        return $this->getUserLog(
            $user,
            $startDate,
            $endDate->modify('+6 days')
        );
    }

    /**
     * @param User $user
     * @param $startDate
     * @param $endDate
     * @return array
     */
    public function getUserLog(User $user, $startDate, $endDate)
    {
        $qb = $this->createQueryBuilder('wl');

        $qb
            ->select('wl.loggedDay, sum(wl.loggedHours) loggedHours')
            ->where($qb->expr()->eq('wl.owner', ':owner'))
            ->andWhere($qb->expr()->between('wl.loggedDay', ':startDate', ':endDate'))
            ->setParameter('owner', $user->getId())
            ->setParameter('startDate', $startDate)
            ->setParameter('endDate', $endDate);

        $qb->groupBy('wl.loggedDay');

        return $qb->getQuery()->getScalarResult();
    }

    /**
     * @param $projectId
     * @return array
     */
    public function getProjectWorkLog($projectId)
    {
        $qb = $this->createQueryBuilder('wl');

        $qb
            ->select('sum(wl.loggedHours) loggedHours')
            ->leftJoin('wl.task', 'wlt')
            ->where($qb->expr()->eq('wlt.project', ':project'))
            ->setParameter('project', $projectId);

        return $qb->getQuery()->getSingleScalarResult();
    }
}
