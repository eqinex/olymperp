<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Project;
use AppBundle\Entity\User;
use AppBundle\Traits\RepositoryPaginatorTrait;
use Doctrine\ORM\EntityRepository;

/**
 * WorkLogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    use RepositoryPaginatorTrait;

    /**
     * @param $filters
     * @param int $currentPage
     * @param $perPage
     * @param string $order
     * @param string $orderBy
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function getEmployees(
        $filters,
        $orderBy,
        $order,
        $currentPage = 1,
        $perPage = 20)
    {
        $qb = $this->createQueryBuilder('emp');

        $qb
            ->select('emp')
            ->where($qb->expr()->neq('emp.admin', 1));
        if (!empty($filters['user'])) {
            $qb->andWhere('emp.id = :userId')
            ->setParameter('userId', $filters['user']);
        }

        if (!empty($filters['team'])) {
            $qb->andWhere(
                $qb->expr()->eq('emp.team', ':team')
            )
            ->setParameter('team', $filters['team']);
        }

        if (!empty($filters['employeeStatus'])) {
            $statuses = [$filters['employeeStatus']];
        } else {
            $statuses = [User::EMPLOYEE_STATUS_ACTIVE, User::EMPLOYEE_STATUS_OUTSOURCE];
        }

        if (!empty($filters['employeeRole'])) {
            $qb->andWhere(
                $qb->expr()->eq('emp.employeeRole', ':employeeRole')
            )
                ->setParameter('employeeRole', $filters['employeeRole']);
        }

        $qb->andWhere(
            $qb->expr()->in('emp.employeeStatus', ':employeeStatus')
        )
        ->setParameter('employeeStatus', $statuses);

        if (!empty($orderBy))
        {
            if ($orderBy == 'employeeRole') {
                $qb
                    ->leftJoin('emp.employeeRole', 'empt')
                    ->orderBy('empt.name', $order);
            } elseif ($orderBy == 'team'){
                $qb
                    ->leftJoin('emp.team', 'empt')
                    ->orderBy('empt.title', $order);
            } else {
                $qb->orderBy('emp.' . $orderBy, $order);
            }
        } else {
            $qb->orderBy('emp.lastname', 'ASC');
        }

        $paginator = $this->paginate($qb, $currentPage, $perPage);

        return $paginator;
    }

    /**
     * @return array
     */
    public function getPurchaseRequestApprovingLeaders()
    {
        $leaders = [];
        foreach ($this->findAll() as $user) {
            /** @var User $user */
            if ($user->isPurchaseRequestApprovingLeader() && !$user->isAdmin()) {
                $leaders[] = $user;
            }
        }

        return $leaders;
    }

    /**
     * @param User $productionLeader
     * @return array
     */
    public function getPurchaseProductionSpecialists(User $productionLeader)
    {
        $specialists = [];
        if ($productionLeader) {
            $specialists[] = $productionLeader;
        }
        foreach ($this->findAll() as $user) {
            /** @var User $user */
            if ($user->canProcessProductionPurchases() && !$user->isAdmin()) {
                $specialists[] = $user;
            }
        }

        return $specialists;
    }

    /**
     * @param Project $project
     * @return array
     */
    public function getUsersGroupedByTeams($project = null)
    {
        $qb = $this->createQueryBuilder('u');
        $qb
            ->select('u')
            ->andWhere($qb->expr()->in('u.employeeStatus', ':employeeStatus'))
            ->setParameter('employeeStatus', [User::EMPLOYEE_STATUS_ACTIVE, User::EMPLOYEE_STATUS_OUTSOURCE]);

        $users = $qb->getQuery()->getResult();

        $teams = [];
        foreach ($users as $user) {
            /** @var User $user */
            if (!$user->isAdmin()) {
                if ($project && $project->isUserPartOfTeam($user)) {
                    continue;
                }
                $teamTitle = 'team.undefined';
                if ($user->getTeam()) {
                    $teamTitle = $user->getTeam()->getTitle();
                }

                if ($user->getEmployeeStatus() != 'inactive') {
                    $teams[$teamTitle][] = $user;
                }
            }

        }

        return $teams;
    }

    /**
     * @return array
     */
    public function getRooms()
    {
        $qb = $this->createQueryBuilder('u');

        $qb
            ->select('DISTINCT u.room')
            ->where($qb->expr()->in('u.employeeStatus', ':employeeStatus'))
            ->setParameter('employeeStatus', [User::EMPLOYEE_STATUS_ACTIVE, User::EMPLOYEE_STATUS_OUTSOURCE]);
        
        $qb->orderBy('u.room', 'ASC');

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * @return array
     */
    public function getEmployeesBirthdates()
    {
        $qb = $this->createQueryBuilder('emp');

        $qb
            ->select('emp')
            ->where($qb->expr()->neq('emp.admin', 1))
            ->andWhere($qb->expr()->in('emp.employeeStatus', ':employeeStatus'))
            ->setParameter('employeeStatus', [User::EMPLOYEE_STATUS_ACTIVE, User::EMPLOYEE_STATUS_OUTSOURCE]);

        $qb->orderBy('emp.dateOfBirth', 'DESC');

        $users = $qb->getQuery()->getResult();

        $today = new \DateTime('now');
        $date = new \DateTime('now');
        $date->modify('+2 weeks');

        $employees = [];
        $employeesDaysOfBirth = [];
        /** @var User $user */
        foreach ($users as $user) {
            $userDayOfBirth = $user->getDateOfBirth() ? $user->getDateOfBirth()->format('d') : '';
            $userMonthOfBirth = $user->getDateOfBirth() ? $user->getDateOfBirth()->format('n') : '';

            if (!$userDayOfBirth || !$userMonthOfBirth) {
                continue;
            }

            if ($date->format('n') == $today->format('n') ? $userDayOfBirth <= $date->format('j') && $userDayOfBirth >= $today->format('j') && $userMonthOfBirth == $date->format('n') : $userMonthOfBirth == $date->format('n') && $userDayOfBirth <= $date->format('j') || $userMonthOfBirth == $today->format('n') && $userDayOfBirth >= $today->format('j')) {
                $employees[] = $user;
                $employeesDaysOfBirth[] = $userMonthOfBirth . ',' . $userDayOfBirth;
            }

        }
        array_multisort($employeesDaysOfBirth, $employees);

        return $employees;
    }

    /**
     * @return bool
     */
    public function getTodayEmployeesBirthdates()
    {
        /** @var User $employee */
        $employees = $this->getEmployeesBirthdates();

        foreach ($employees as $employee) {
            $employeeDateOfBirth = $employee->getDateOfBirth() ? $employee->getDateOfBirth()->format('m/d') : '';
            if ($employeeDateOfBirth == date('m/d')) {
                return true;
            }
        }
        return false;
    }

    /**
     * @param User $employee
     * @return bool
     */
    public function getTodayEmployeeBirthdate($employee)
    {
        $employeeDateOfBirth = $employee->getDateOfBirth() ? $employee->getDateOfBirth()->format('m/d') : '';
        if ($employeeDateOfBirth == date('m/d')) {
            return true;
        }

        return false;
    }
}