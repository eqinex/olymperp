<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Project;
use AppBundle\Entity\User;
use Doctrine\ORM\QueryBuilder;

/**
 * ProjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectRepository extends \Doctrine\ORM\EntityRepository
{
    public function getAllAvailableProjects(User $user, $filters = [])
    {
        $qb = $this->createQueryBuilder('p');

        $qb->select('p');

        $qb->leftJoin('p.status', 'ps');

        $qb = $this->applyFilters($qb, $filters, $user);
        
        $qb->orderBy('p.priority', 'ASC');

        return $qb->getQuery()->getResult();
    }

    public function getAvailableProjects(User $user, $filters = [], $orderBy = 'priority', $order = 'asc')
    {
        $qb = $this->createQueryBuilder('p');

        $qb->select('p');

        $qb->leftJoin('p.status', 'ps');

        $qb = $this->applyFilters($qb, $filters, $user);

        $qb->andWhere('p.type = :project');
        $qb->setParameter('project', 'project');

        if ($orderBy == 'leader') {
            $qb
                ->leftJoin('p.leader', 'pl')
                ->orderBy('pl.lastname', $order);
        } else {
            $qb->orderBy('p.' . $orderBy, $order);
        }

        return $qb->getQuery()->getResult();
    }

    public function getAvailableProducts(User $user, $filters = [])
    {
        $qb = $this->createQueryBuilder('p');

        $qb->select('p');

        $qb->leftJoin('p.status', 'ps');

        $qb = $this->applyFilters($qb, $filters, $user);

        $qb->andWhere('p.type = :type');
        $qb->setParameter('type', 'product');

        $qb->orderBy('p.priority', 'ASC');

        return $qb->getQuery()->getResult();
    }

    public function getAvailableTeamSpaces(User $user, $filters = [])
    {
        $qb = $this->createQueryBuilder('p');

        $qb->select('p');

        $qb->leftJoin('p.status', 'ps');

        $qb = $this->applyFilters($qb, $filters, $user);

        $qb->andWhere('p.type = :type');
        $qb->setParameter('type', 'team');

        $qb->orderBy('p.priority', 'ASC');

        return $qb->getQuery()->getResult();
    }

    public function getProjectsWithPurchases()
    {
        $qb = $this->createQueryBuilder('p');

        $qb->select('p');

        $qb->leftJoin('p.projectPurchases', 'ppr');
        $qb->having('count(ppr.id) != 0');

        $qb->orderBy('p.name', 'ASC');
        $qb->groupBy('p.id');

        return $qb->getQuery()->getResult();
    }

    /**
     * @param QueryBuilder $qb
     * @param $filters
     * @param $user
     * @return QueryBuilder
     */
    protected function applyFilters(QueryBuilder $qb, $filters, $user)
    {
        if (!empty($filters['category'])) {
            $qb
                ->andWhere('p.category = :category')
                ->setParameter('category', $filters['category'])
            ;
        }
        if (!empty($filters['status'])) {
            $qb
                ->andWhere('p.status = :status')
                ->setParameter('status', $filters['status'])
            ;
        } else {
            $qb
                ->andWhere($qb->expr()->eq('ps.archived', 0))
            ;
        }
        if (!empty($filters['project'])) {
            $qb
                ->andWhere('p.id = :projectId')
                ->setParameter('projectId', $filters['project'])
            ;
        }
        if (!empty($filters['leader']) ) {
            $qb
                ->andWhere('p.leader = :leader')
                ->setParameter('leader', $filters['leader'])
            ;
        }
        if (!empty($filters['priority'])) {
            $qb
                ->andWhere('p.priority = :priority')
                ->setParameter('priority', $filters['priority'])
            ;
        }

        if (!$user->hasFullAccess()) {
            $qb
                ->leftJoin('p.projectMembers', 'pm')
                ->andWhere(
                    $qb->expr()->orX(
                        $qb->expr()->neq('p.type', ':typeProject'),
                        $qb->expr()->orX(
                            'p.leader = :user',
                            'pm.member = :user'
                        )
                    )
                )
                ->setParameter('user', $user->getId())
                ->setParameter('typeProject', 'project');
        }

        return $qb;
    }
}
