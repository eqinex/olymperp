<?php

namespace AppBundle\Repository;
use AppBundle\Entity\User;


/**
 * DayOffRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DayOffRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $weekNumber
     * @param $user
     * @return array
     */
    public function getSelectedWeekOff($weekNumber, $user)
    {
        $selectedWeek = (new \DateTime())->setISODate((new \DateTime())->format('Y'), $weekNumber)->setTime(0, 0);

        $startDate = clone $selectedWeek;
        $endDate = clone $selectedWeek;

        return $this->getWeekDayOffs(
            $startDate,
            $endDate->modify('+6 days'),
            $user
        );
    }

    /**
     * @param \DateTime $startDate
     * @param \DateTime $endDate
     * @param $users
     * @return array
     */
    public function getWeekDayOffs(\DateTime $startDate, \DateTime $endDate, $users)
    {
        $qb = $this->createQueryBuilder('d');

        $qb
            ->leftJoin('d.owner', 'doff')
            ->select('doff.id userId, d.type, d.dateStart, d.dateEnd')
            ->where(
                $qb->expr()->orX(
                    $qb->expr()->between('d.dateStart', ':startDate', ':endDate'),
                    $qb->expr()->between('d.dateEnd', ':startDate', ':endDate'),
                    $qb->expr()->between(':startDate', 'd.dateStart', 'd.dateEnd'),
                    $qb->expr()->between(':endDate', 'd.dateStart', 'd.dateEnd')
                )
            )
            ->andWhere($qb->expr()->in('d.owner', ':users'))
            ->setParameter('startDate', $startDate)
            ->setParameter('endDate', $endDate)
            ->setParameter('users', $users);
        ;

        $weekDayOff = [];

        $interval = \DateInterval::createFromDateString('1 day');
        $period = new \DatePeriod($startDate, $interval, $endDate->modify('+1 day'));

        foreach ($qb->getQuery()->getScalarResult() as $dayOff) {
            $dayOffStart = new \DateTime($dayOff['dateStart']);
            $dayOffEnd = new \DateTime($dayOff['dateEnd']);
            
            foreach ($period as $dt) {
                if (!isset($weekDayOff[(int) $dt->format('w')][$dayOff['userId']])) {
                    $weekDayOff[(int) $dt->format('w')][$dayOff['userId']] = [];
                }
                if ($dt->format('Y-m-d') >= $dayOffStart->format('Y-m-d') &&
                    $dt->format('Y-m-d') <= $dayOffEnd->format('Y-m-d'))  {
                    $weekDayOff[(int) $dt->format('w')][$dayOff['userId']] = [
                        'type' => $dayOff['type'],
                        'dayOffStart' => $dayOffStart,
                    ];
                }
            }
        }
        return $weekDayOff;
    }

    /**
     * @param $teamMembers
     * @param $year
     * @param $type
     * @return mixed
     */
    public function getDayOffTeamMembers($teamMembers, $year, $type)
    {
        $qb = $this->createQueryBuilder('d');

        $qb->select('d');

        $yearDayOffStart = (new \DateTime())->format($year . '-01-01');
        $yearDayOffEnd = (new \DateTime())->format($year . '-12-31');

        $qb
            ->where($qb->expr()->between('d.dateStart', ':yearDayOffStart', ':yearDayOffEnd'))
            ->andWhere($qb->expr()->in('d.owner', ':teamMembers'))
            ->andWhere($qb->expr()->eq('d.type', ':type'))

            ->setParameter('yearDayOffStart', $yearDayOffStart)
            ->setParameter('yearDayOffEnd', $yearDayOffEnd)
            ->setParameter('teamMembers', $teamMembers)
            ->setParameter('type', $type)
        ;
        $qb
            ->leftJoin('d.owner', 'u')
            ->orderBy('u.lastname', 'asc');

        return $qb->getQuery()->getResult();
    }

    /**
     * @param User $user
     * @return bool
     * @throws \Exception
     */
    public function isDayOff(User $user) {

        $qb = $this->createQueryBuilder('d');

        $qb
            ->select('d')
            ->where($qb->expr()->between('CURRENT_TIMESTAMP()', 'd.dateStart', 'd.dateEnd'))
            ->andWhere('d.owner = :user')
            ->setParameter('user', $user)
        ;

        if ($qb->getQuery()->getScalarResult()) {
            return true;
        }

        return false;
    }
}


