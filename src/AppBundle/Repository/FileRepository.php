<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Project;
use AppBundle\Entity\ProjectPassport;
use AppBundle\Entity\User;
use AppBundle\Traits\RepositoryPaginatorTrait;

/**
 * ProjectFileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FileRepository extends \Doctrine\ORM\EntityRepository
{
    use RepositoryPaginatorTrait;

    /**
     * @param $filters
     * @param User $user
     * @param int $currentPage
     * @param int $perPage
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function  getFiles($filters, User $user, $currentPage = 1, $perPage = 20)
    {
        $qb = $this->createQueryBuilder('fl');

        $qb
            ->select('fl')
            ->where($qb->expr()->isNull('fl.deleted'));

        $users = [$user->getId()];

        if ($user->getSubmissionTeam()) {
            foreach ($user->getSubmissionTeam()->getTeamMembers() as $member) {
                $users[] = $member->getId();
            }
        }

        $qb
            ->andWhere($qb->expr()->in('fl.owner', ':users'))
            ->setParameter('users', $users);

        if (!empty($filters['filename'])) {
            $qb
                ->andWhere($qb->expr()->like('fl.fileName', ':filename'))
                ->setParameter('filename', '%' . $filters['filename'] . '%')
            ;
        }

        if (!empty($filters['project']))  {
            $qb
                ->andWhere('fl.project = :project')
                ->setParameter('project', $filters['project']);
        }

        if (!empty($filters['format'])) {
            $qb
                ->andWhere('fl.format = :format')
                ->setParameter('format', $filters['format'])
            ;
        }

        $qb
            ->addOrderBy('fl.id', 'DESC');


        $paginator = $this->paginate($qb, $currentPage, $perPage);

        return $paginator;
    }

    /**
     * @return array
     */
    public function getUniqueFormatFiles()
    {
        return $this
            ->createQueryBuilder('f')
            ->select('DISTINCT f.format')
            ->orderBy('f.format', 'ASC')
            ->getQuery()
            ->getArrayResult();
    }

    /**
     * @param $project
     * @param $projectPassport
     * @return mixed
     */
    public function getProjectPassportFile($project, $projectPassport)
    {
        $qb = $this->createQueryBuilder('ppf');

        $qb->select('ppf');

        $qb
            ->where($qb->expr()->eq('ppf.project', ':project'))
            ->andWhere($qb->expr()->eq('ppf.projectPassport', ':projectPassport'))
            ->setParameter('project', $project)
            ->setParameter('projectPassport', $projectPassport)
        ;

        return $qb->getQuery()->getResult();
    }
}
