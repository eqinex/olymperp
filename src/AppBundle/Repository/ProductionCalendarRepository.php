<?php
/**
 * Created by PhpStorm.
 * User: shemyakindv
 * Date: 13.06.19
 * Time: 11:22
 */

namespace AppBundle\Repository;

use AppBundle\Entity\ProductionCalendar;

/**
 * ProductionCalendarRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductionCalendarRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @return bool
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function isWorkDay()
    {
        $todayAt = new \DateTime(date('d.m.Y'));

        $isCalendarWorkDay = $this->checkCalendarDate($todayAt, [ProductionCalendar::TYPE_SHORTENED_DAY, ProductionCalendar::TYPE_WORKING_DAY]);
        $isCalendarHoliday = $this->checkCalendarDate($todayAt, [ProductionCalendar::TYPE_HOLIDAY]);

        if ($isCalendarWorkDay) {
            return true;
        } else if ($isCalendarHoliday or in_array($todayAt->format('N'), [6, 7])) {
            return false;
        }

        return true;
    }

    /**
     * @param \DateTime $checkDate
     * @param $types
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    protected function checkCalendarDate(\DateTime $checkDate, $types) {

        $qb = $this->createQueryBuilder('pc');

        $qb
            ->select('pc')
            ->where($qb->expr()->between(':todayAt', 'pc.dateStart', 'pc.dateEnd'))
            ->andWhere($qb->expr()->in('pc.type', ':types'))
            ->setParameter('todayAt', $checkDate)
            ->setParameter('types', $types)
        ;

        return $qb->getQuery()->getResult();
    }
}