<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Project;
use AppBundle\Traits\RepositoryPaginatorTrait;
use Doctrine\ORM\QueryBuilder;

/**
 * CostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CostRepository extends \Doctrine\ORM\EntityRepository
{
    use RepositoryPaginatorTrait;

    public function getProjectCosts($filters, $currentPage = 1, $perPage = 20)
    {
        $qb = $this->createQueryBuilder('c');

        $qb
            ->select('c')
            ->andWhere('c.deleted != :deleted')
            ->setParameter('deleted', true)
        ;

        $qb = $this->applyFilters($qb, $filters);
        $qb->orderBy('c.id', 'DESC');

        $paginator = $this->paginate($qb, $currentPage, $perPage);

        return $paginator;
    }

    /**
     * @param $projectId
     * @return mixed
     */
    public function getProjectCostTotal($projectId)
    {
        $qb = $this->createQueryBuilder('c');

        $qb
            ->select('SUM(c.amount)')

            ->where('c.project = :projectId')
            ->andWhere('c.deleted != :deleted')
            ->setParameter('projectId', $projectId)
            ->setParameter('deleted', true)
        ;

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @param QueryBuilder $qb
     * @param $filters
     * @return QueryBuilder
     */
    protected function applyFilters(QueryBuilder $qb, $filters)
    {
        if (!empty($filters['project'])) {
            $qb
                ->andWhere('c.project = :project')
                ->setParameter('project', $filters['project'])
            ;
        }

        return $qb;
    }
}
