<?php

namespace ProductionBundle\Repository;

use AppBundle\Entity\Project;
use AppBundle\Traits\RepositoryPaginatorTrait;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
use ProductionBundle\Entity\Serial;
use ProductionBundle\Entity\Ware;

/**
 * WareRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class WareRepository extends \Doctrine\ORM\EntityRepository
{
    use RepositoryPaginatorTrait;

    /**
     * @param $filters
     * @param int $currentPage
     * @param $perPage
     * @return Paginator
     */
    public function getProducts($filters, $currentPage = 1, $perPage = 20)
    {
        $qb = $this->createQueryBuilder('p');

        $qb->select('p');

        $qb = $this->applyFilters($qb, $filters);

        $paginator = $this->paginate($qb, $currentPage, $perPage);

        return $paginator;
    }

    /**
     * @param QueryBuilder $qb
     * @param $filters
     * @return QueryBuilder
     */
    protected function applyFilters(QueryBuilder $qb, $filters)
    {
        if (!empty($filters['project'])) {
            $qb
                ->andWhere('p.project = :project')
                ->setParameter('project', $filters['project'])
            ;
        }

        if (!empty($filters['name'])) {
            $qb
                ->andWhere($qb->expr()->like('p.name', ':name'))
                ->setParameter('name', '%' . $filters['name'] . '%')
            ;
        }

        return $qb;
    }

    /**
     * @param $serials
     * @param Ware|null $ware
     * @return array
     */
    public function getSerialProducts($serials, Ware $ware = null)
    {
        $qb = $this->createQueryBuilder('sp');

        $qb->select('sp');

        $products = $qb->getQuery()->getResult();

        $waresIds = [];

        /** @var Serial $serial */
        foreach ($serials as $serial) {
            $waresIds[] = $serial->getWare()->getId();
        }

        $wares = [];
        /** @var Ware $product */
        foreach ($products as $product) {
            if (in_array($product->getId(), $waresIds)) {
                continue;
            }
            $wares[] = $product;
        }

        if (!empty($ware)) {
            $wares[] = $ware;
        }

        return $wares;
    }

    /**
     * @param Project $project
     * @return mixed
     */
    public function getWaresForGanttChart(Project $project)
    {
        $qb = $this->createQueryBuilder('wgc');

        $qb->select('wgc');

        $qb
            ->leftJoin('wgc.purchaseRequests', 'pr')
            ->andWhere($qb->expr()->eq('wgc.project', ':project'))
            ->setParameter('project', $project->getId())
        ;
        
        return $qb->getQuery()->getResult();
    }
}