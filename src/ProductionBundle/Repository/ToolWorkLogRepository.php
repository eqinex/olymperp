<?php

namespace ProductionBundle\Repository;
use AppBundle\Traits\RepositoryPaginatorTrait;

/**
 * ToolWorkLogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class ToolWorkLogRepository extends \Doctrine\ORM\EntityRepository
{
    use RepositoryPaginatorTrait;

    /**
     * @param $toolId
     * @param $filters
     * @param int $currentPage
     * @param int $perPage
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function  getToolWorkLog($toolId, $filters, $currentPage = 1, $perPage = 20)
    {
        $qb = $this->createQueryBuilder('twl');

        $qb
            ->select('twl')
            ->where('twl.tool = :toolId')
            ->setParameter('toolId', $toolId)
        ;

        $qb->orderBy('twl.id','DESC');

        if (!empty($filters['title'])) {
            $qb
                ->andWhere($qb->expr()->like('twl.title', ':title'))
                ->setParameter('title', '%' . $filters['title'] . '%');
        }

        if (!empty($filters['designation'])) {
            $qb
                ->andWhere($qb->expr()->like('twl.designation', ':designation'))
                ->setParameter('designation', '%' . $filters['designation'] . '%');
        }

        if (!empty($filters['project']))  {
            $qb
                ->andWhere('twl.project = :project')
                ->setParameter('project', $filters['project']);
        }

        $paginator = $this->paginate($qb, $currentPage, $perPage);

        return $paginator;
    }

}