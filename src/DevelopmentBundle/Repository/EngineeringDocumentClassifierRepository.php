<?php

namespace DevelopmentBundle\Repository;

use AppBundle\Traits\RepositoryPaginatorTrait;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * EngineeringDocumentClassifierRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EngineeringDocumentClassifierRepository extends EntityRepository
{
    use RepositoryPaginatorTrait;

    /**
     * @param $filters
     * @param int $currentPage
     * @param int $perPage
     * @return mixed
     */
    public function getEngineeringDocumentClassifier($filters, $currentPage = 1, $perPage = 50)
    {
        $qb = $this->createQueryBuilder('edc');

        $qb->select('edc');

        $qb = $this->applyFilters($qb, $filters);

        $paginator = $this->paginate($qb, $currentPage, $perPage);

        return $paginator;
    }

    /**
     * @param $filters
     * @return mixed
     */
    public function getSelectClassifier($filters)
    {
        $qb = $this->createQueryBuilder('edc');

        $qb->select('edc');

        $qb = $this->applyFilters($qb, $filters);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param QueryBuilder $qb
     * @param $filters
     * @return QueryBuilder
     */
    protected function applyFilters(QueryBuilder $qb, $filters) {

        $subgroup = !empty($filters['subgroup']) ? $filters['subgroup'] : '';
        $count  = strlen(preg_replace('/[^\d]/','', $subgroup));
        if (!empty($filters['class'])) {
            $qb
                ->andWhere(
                    $qb->expr()->eq('edc.class', ':class'),
                    $qb->expr()->like('edc.subgroup', ':subgroup')
                )
                ->setParameter('class', $filters['class'])
                ->setParameter('subgroup', $this->getSubgroupFilter($subgroup, $count));
        } else {
            $qb->andWhere(
                $qb->expr()->isNull('edc.subgroup')
            );
        }

        return $qb;
    }

    /**
     * @param $subgroup
     * @param $count
     * @return string
     */
    protected function getSubgroupFilter($subgroup, $count) {

        if ($count == 0) {
            $subgroup = '%' . '...';
        } else {
            $subgroup = substr($subgroup, 0, $count) . '%' . substr($subgroup, $count, 3 - $count);
        }

        return $subgroup;
    }
}